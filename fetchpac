#!/usr/bin/env bash

### Fetchpac: A CLI tool written in Bash for printing system package information.
### This utility is useful for system maintenance and tracking of system installed packages. 
### It displays the total number of packages (explicit, dependency, native, foreign, orphan); package cache size;
### and time of most recent full system upgrade and most recent synchronized package list.
### More information and command-line options will continue to be added. 
### This includes appearance customization, verbosity, and printing explanations.

# Use the C locale for faster execution of script
LC_ALL=C
LANG=C

# Case-insensitive matching of patterns
shopt -s nocasematch

# If set to "true", prints in minimal format with no ASCII image
flag_minimal="false"

# Text Format Constants
reset='\e[0m'
bold='\e[1m'
underlined='\e[4m'

### Color options 0-15 correspond to the 16-color palette printed by fetchpac 
### Color option 16 is the default text color defined by your terminal
### The actual colors displayed vary for each user, dependent on terminal settings
color_default='\e[39m'          # 16 - default color defined by terminal

color_black='\e[30m'            # 0
color_red='\e[31m'              # 1
color_green='\e[32m'            # 2
color_yellow='\e[33m'           # 3
color_blue='\e[34m'             # 4
color_magenta='\e[35m'          # 5
color_cyan='\e[36m'             # 6
color_light_gray='\e[37m'       # 7

color_dark_gray='\e[90m'        # 8
color_light_red='\e[91m'        # 9
color_light_green='\e[92m'      # 10
color_light_yellow='\e[93m'     # 11
color_light_blue='\e[94m'       # 12
color_light_magenta='\e[95m'    # 13
color_light_cyan='\e[96m'       # 14
color_white='\e[97m'            # 15

# Variables for text formatting, with an initialized value
gap=1                           # gap between ascii image and system/package information
a1=3                            # a1 - ascii color of pacman body       (default yellow)
a2=12                           # a2 - ascii color of pacman eye        (default light blue)
a3=6                            # a3 - ascii color of Arch Linux logo   (default cyan)

c1=6                            # c1 - information headers              (default cyan)
c2=2                            # c2 - information titles               (default green)
c3=16                           # c3 - information text                 (default default)

m1=6                            # m1 - minimal output (TOT)
m2=1                            # m2 - minimal output (ORP)                            
m3=4                            # m3 - minimal output (EXP, DEP)
m4=5                            # m4 - minimal output (NAT, FOR)
m5=3                            # m4 - minimal output (CAC)
m6=2                            # m4 - minimal output (-Sy, -Su)

### A procedural timeline of how ASCII design and color is set:
### (1) From the fetchpac script, set default values for colors and system variables
###         => default values for color variables { a1, a2, a3, c1, c2, c3 }
###         => get_system_info() to set system information variables
###         => get_distro(), and then set the ASCII design to be the script-detected distro
### (2) Read /etc/fetchpac/fetchpac.conf, then ${HOME}/.config/fetchpac/fetchpac.conf
###         => read variable for ascii_design 
###         => tweak_ascii_colors() to change ASCII colors depending on ascii_design
###         => read variables for ASCII colors
### (3) parse_args() to read cmdline arguments
### (4) print_ascii() to print ASCII image

# Variable for selecting what ASCII design to print
# ascii_design              # "Manjaro", "Arch" (default), etc.

# Variables storing system info, to be printed by print_info(), with examples
# Provided here for an overall summary
### user                    (sky)
### hostname                (skyarch)
### distro                  (Arch Linux)
### kernel_release          (5.7.10-arch1-1)
### device                  (Inspiron 7590)
### uptime                  (2 days, 10 hours, 3 mins)
### uptime_days             (2)
### uptime_hours            (10)
### uptime_mins             (3)

### pkg_total               (903)
### pkg_explicit            (203)
### pkg_depends             (700)
### pkg_native              (897)
### pkg_foreign             (6)
### pkg_orphan              (2)

### pkg_cache_size          (3.4G)
### upgrade_time            (Thu 30-Jul-2020 (14:49 PM))
### synchronize_time        (Thu 30-Jul-2020 (14:49 PM))

# this function, main, is called at the end of this file
main() {
    get_system_info         # call script functions to detect system info

    # --- Beginning of user configurations ---

    source /etc/fetchpac/fetchpac.conf 2> /dev/null             
    source ${HOME}/.config/fetchpac/fetchpac.conf 2> /dev/null 

    parse_args "$@"         # pass the arguments passed to main to parse_args()
    
    # --- End of user configurations ---
    
    convert_colors          # e.g. convert a1 from "3" to "\e[1m\e[33m" (bold yellow)

    if [[ "$flag_minimal" == "true" ]]; then
        print_minimal
    fi

    get_ascii               # read ascii image into a variable
    print_ascii             # print ascii image to terminal

    print_system_info       # print information about system 

    get_package_info        # call script functions to get package info
    print_package_info      # print information about packages
    
    print_color_blocks      # print color blocks, for aesthetics and to display color options

    printf "\n"             # print newlines for vertical padding
    printf "\n"
}

get_system_info() {
    get_user
    get_hostname
    get_distro
    get_kernel_release
    get_device
    get_uptime
}

tweak_ascii_colors() {
    case "${ascii_design}" in
        # Catch the MORE SPECIFIC designs first
        # This catches "DarkTux" preferentially over "Tux", as well as for avoiding typos
        # Case-insensitive; earlier executed "shopt -s nocasematch"
        *"darkArch"* | *"darkManjaro"* | *"darkTux"*)
            a1=0
            a2=1                # set pacman eye to Red
            a3=1                # set small logo to Red
            c1=1                # set Header text to Red color
            c2=0
            ;;
        *"Manjaro"*)
            a3=2                # set Manjaro logo to Green color
            c1=2                # set Header text to Green color
            c2=5                # set Title text to Magenta color
            ;;
        *"Tux"*)
            a1=0                # set pacman body to White color
            a3=3                # set Tux logo to Yellow color
            c1=3                # set Header text to Yellow color
            c2=4                # set Title text to Blue color
            ;;
    esac 
}

# Parse arguments passed to fetchpac 
# Available options: -hrac
parse_args() {
    while [[ "$1" ]]; do
        case $1 in
            "-"*)                   # catch only params starting with "-"
                [[ $1 == *"h"* ]] && print_help
                [[ $1 == *"d"* ]] && ascii_design=$2 && tweak_ascii_colors
                [[ $1 == *"r"* ]] && randomize_colors

                # if parameter "-xyaz" contains an 'a'
                # if $2 does not start with '-' AND $2 is not empty, a1=$2
                # if $3 does not start with '-' AND $3 is not empty, a2=$3
                # if $4 does not start with '-' AND $4 is not empty, a3=$4
                if [[ $1 == *"a"* ]]; then
                    if [[ $2 != "-"* && ! -z $2 ]]; then a1=$2
                        if [[ $3 != "-"* && ! -z $3 ]]; then a2=$3 
                            if [[ $4 != "-"* && ! -z $4 ]]; then a3=$4
                            fi
                        fi
                    fi
                fi

                # if parameter "-xycz" contains a 'c'
                # same code snippet as above
                if [[ $1 == *"c"* ]]; then
                    if [[ $2 != "-"* && ! -z $2 ]]; then c1=$2
                        if [[ $3 != "-"* && ! -z $3 ]]; then c2=$3 
                            if [[ $4 != "-"* && ! -z $4 ]]; then c3=$4
                            fi
                        fi
                    fi
                fi

                # if parameter "-xycz" contains a 'm'
                if [[ $1 == *"m"* ]]; then
                    flag_minimal="true"
                    
                    if [[ $2 != "-"* && ! -z $2 ]]; then m1=$2
                        if [[ $3 != "-"* && ! -z $3 ]]; then m2=$3 
                            if [[ $4 != "-"* && ! -z $4 ]]; then m3=$4
                                if [[ $5 != "-"* && ! -z $5 ]]; then m4=$5
                                    if [[ $6 != "-"* && ! -z $6 ]]; then m5=$6
                                        if [[ $7 != "-"* && ! -z $7 ]]; then m6=$7
                                        fi
                                    fi
                                fi
                            fi
                        fi
                    fi
                fi
        esac

        shift
    done
}

# Print help text and exit the fetchpac process
print_help() {
    help_text="
Usage: fetchpac [OPTION]...
A CLI tool written in Bash for printing system package information.
Uses configuration files and default values if no OPTION is provided.

----- Options -----
INFO:
    -h                  Print this text and exit

COLOR:
    -r                  Randomize colors of ASCII image and information text
    -a a1 a2 a3         Set colors of ASCII image
    -c c1 c2 c3         Set colors of information text 
    -d manjaro          Set ASCII design and colors to Manjaro's

----- Examples -----
    -hrac 4 5 6         -h option overrides all others. Print this text and exit
    -r                  Randomize colors of ASCII image and information text
    -a 4 5 6            Set colors of ASCII image a1, a2, a3
    -a 7 8              Set colors of ASCII image a1, a2
    -c 4 5 6            Set colors of information text c1, c2, c3
    -c 7 8              Set colors of information text c1, c2
    -ac 4 5 6           Set colors of a1, a2, a3, c1, c2, c3
    -ac 7 8             Set colors of a1, a2, c1, c2
    -a 4 5 -c 6 7       Set colors of a1, a2, c1, c2 separately
    -rac 7 8            Randomize all colors, then set a1, a2, c1, c2
    -ac 7 8 -r          Set a1, a2, c1, c2, and then randomize all colors
    -d manjaro -r       Set ASCII design and colors to Manjaro's, then randomize all colors
    -dr manjaro         Set ASCII design and colors to Manjaro's, then randomize all colors
    -r -d manjaro       Randomize all colors, then set ASCII design and colors to Manjaro's
"
    echo "$help_text"
    exit
}

# Randomize each of the 6 color variables to be from 0 to 15 inclusive
randomize_colors() {
    a1=$(( $RANDOM % 16 ))      # set a1 to random number from 0 to 15 inclusive
    a2=$(( $RANDOM % 16 ))
    a3=$(( $RANDOM % 16 ))
    c1=$(( $RANDOM % 16 ))
    c2=$(( $RANDOM % 16 ))
    c3=$(( $RANDOM % 16 ))

    m1=$(( $RANDOM % 16 ))
    m2=$(( $RANDOM % 16 ))
    m3=$(( $RANDOM % 16 ))
    m4=$(( $RANDOM % 16 ))
    m5=$(( $RANDOM % 16 ))
    m6=$(( $RANDOM % 16 ))
}

convert_colors() {
    color_nums=( 3{0..7} 9{0..7} 39 )       # array of ( 30 31 .. 37 90 91 .. 97 39 )

    a1="${bold}\e[${color_nums[a1]}m"       # convert a1 from "3" to "\e[1m\e[33m"
    a2="${bold}\e[${color_nums[a2]}m"       # also apply bold
    a3="${bold}\e[${color_nums[a3]}m"       # if array index is invalid, value defaults to 30

    c1="${bold}\e[${color_nums[c1]}m"
    c2="${bold}\e[${color_nums[c2]}m"
    c3="${reset}\e[${color_nums[c3]}m"
    
    m1="${bold}\e[${color_nums[m1]}m"
    m2="${bold}\e[${color_nums[m2]}m"
    m3="${bold}\e[${color_nums[m3]}m"
    m4="${bold}\e[${color_nums[m4]}m"
    m5="${bold}\e[${color_nums[m5]}m"
    m6="${bold}\e[${color_nums[m6]}m"
}

# Print minimal package info, then exit
print_minimal() {
    get_package_info
    printf "\n\n"

    # \e[99D moves all the way left
    # \e[14C moves 14 spaces to the right
    info="\e[4C${m1}TOT| ${pkg_total}\e[99D\e[14C ${m2}ORP| ${pkg_orphan}"       
    printf '%b\n' "${info}"

    info="\e[4C${m3}EXP| ${pkg_explicit}\e[99D\e[14C DEP| ${pkg_depends}"
    printf '%b\n' "${info}"
    
    info="\e[4C${m4}NAT| ${pkg_native}\e[99D\e[14C FOR| ${pkg_foreign}"
    printf '%b\n' "${info}"
    
    info="\e[4C${m5}CAC| ${pkg_cache_size}"
    printf '%b\n' "${info}"

    info="\e[4C${m6}-Sy| ${synchronize_time}"
    printf '%b\n' "${info}"

    info="\e[4C${m6}-Su| ${upgrade_time}"
    printf '%b\n' "${info}"

                                           
    printf "\n\n"
    exit
}

# read ascii image into a variable
# ascii_height is vertical height of ascii image
# ascii_len is horizontal length of ascii image
get_ascii() {
    case "${ascii_design}" in 
        *"Manjaro"*)
            ascii_height=21
            ascii_len=50
            
            read -rd '' ascii_image <<'EOF'
${a1}          `poooooooooooooooooooo
       `meeeeeeeeeeeeeeeeeeeeeeeeee
     `meeeeeeeeeeeeeeeeeeeeeeeeeeeeee
   `meeeeeeeeeee${a2}#%#${a1}eeeeeeeeeeeeeeeeeee
  `meeeeeeeeee${a2}#%   %#${a1}eeeeeeeeeeeeeeeeee
`meeeeeeeeeeeeee${a2}#%#${a1}eeeeeeeeeeeeeeeeee   
<eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee     
oeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee    
<eeeeeeeeeeeeeeeeeeeeeeeeeeeee     ${a3} ███████ ███ ${a1}
oeeeeeeeeeeeeeeeeeeeeeeeeeee       ${a3} ███████ ███ ${a1}
<eeeeeeeeeeeeeeeeeeeeeeeee         ${a3} ███     ███ ${a1}
oeeeeeeeeeeeeeeeeeeeeeeeeeee       ${a3} ███ ███ ███ ${a1}
<eeeeeeeeeeeeeeeeeeeeeeeeeeeee     ${a3} ███ ███ ███ ${a1}
oeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee   ${a3} ███ ███ ███ ${a1}
<eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
`<eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
  `<eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
   `<eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
      `<eeeeeeeeeeeeeeeeeeeeeeeeee
          `<eeeeeeeeeeeeeeeeee
                `<~~~~~~
EOF
            ;;

        *"Tux"*)
            ascii_height=21
            ascii_len=50
            
            read -rd '' ascii_image <<'EOF'
${a1}          `poooooooooooooooooooo
       `meeeeeeeeeeeeeeeeeeeeeeeeee
     `meeeeeeeeeeeeeeeeeeeeeeeeeeeeee
   `meeeeeeeeeee${a2}#%#${a1}eeeeeeeeeeeeeeeeeee
  `meeeeeeeeee${a2}#%   %#${a1}eeeeeeeeeeeeeeeeee
`meeeeeeeeeeeeee${a2}#%#${a1}eeeeeeeeeeeeeeeeee   
<eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee     
oeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee${a3}  $$$$$ `              ${a1}
<eeeeeeeeeeeeeeeeeeeeeeeeeeeee${a3}   $     $ ``            ${a1}
oeeeeeeeeeeeeeeeeeeeeeeeeeee${a3}     $ @ @ $  `            ${a1}
<eeeeeeeeeeeeeeeeeeeeeeeee${a3}       $  <  $               ${a1}
oeeeeeeeeeeeeeeeeeeeeeeeeeee${a3}   $$       $$             ${a1}
<eeeeeeeeeeeeeeeeeeeeeeeeeeeee${a3}$  ${rs} .~~~. ${a3} $$  ${a1}
oeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee${rs} /     \ ${a3} $$      ${a1} 
<eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee${rs}     \ ${a3} $      ${a1} 
`<eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee${a3}  (^~^~^)         ${a1}
  `<eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee${a3}~*\   /          ${a1}
   `<eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee${a3}    \_/           ${a1}
      `<eeeeeeeeeeeeeeeeeeeeeeeeee${a3}                     ${a1}
          `<eeeeeeeeeeeeeeeeee
                `<~~~~~~
EOF
            ;;

        *)
            ascii_height=21
            ascii_len=50
            
            read -rd '' ascii_image <<'EOF'
${a1}          `poooooooooooooooooooo
       `meeeeeeeeeeeeeeeeeeeeeeeeee
     `meeeeeeeeeeeeeeeeeeeeeeeeeeeeee
   `meeeeeeeeeee${a2}#%#${a1}eeeeeeeeeeeeeeeeeee
  `meeeeeeeeee${a2}#%   %#${a1}eeeeeeeeeeeeeeeeee
`meeeeeeeeeeeeee${a2}#%#${a1}eeeeeeeeeeeeeeeeee   
<eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee     
oeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee       ${a3} `/\` ${a1}
<eeeeeeeeeeeeeeeeeeeeeeeeeeeee        ${a3} ./%%\. ${a1}
oeeeeeeeeeeeeeeeeeeeeeeeeeee         ${a3} `/%%%%\` ${a1}
<eeeeeeeeeeeeeeeeeeeeeeeee         ${a3}  ./%%%%%%\. ${a1}
oeeeeeeeeeeeeeeeeeeeeeeeeeee      ${a3}  ./%%_mm_%%\. ${a1}
<eeeeeeeeeeeeeeeeeeeeeeeeeeeee   ${a3}  */_-`    `-_\* ${a1}
oeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
<eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
`<eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
  `<eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
   `<eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
      `<eeeeeeeeeeeeeeeeeeeeeeeeee
          `<eeeeeeeeeeeeeeeeee
                `<~~~~~~
EOF
            ;;
    esac
}

# print ascii image out to terminal
print_ascii() {
    # LC_ALL=${LANG:-C}

    ascii_image="${ascii_image//\$\{a1\}/$a1}"          # replace "${a1}" in image with '\e[33m',
    ascii_image="${ascii_image//\$\{a2\}/$a2}"          # required as printf below does not have interpolation
    ascii_image="${ascii_image//\$\{a3\}/$a3}"
    ascii_image="${ascii_image//\$\{c4\}/$c4}"
    ascii_image="${ascii_image//\$\{c5\}/$c5}"
    ascii_image="${ascii_image//\$\{c6\}/$c6}"

    ascii_image="${ascii_image//\$\{rs\}/$reset}"       # ${rs} used in ASCII image for resetting text format

    # print ascii image to terminal, then reset text formatting 
    printf '%b\n' "$ascii_image${reset}"

    # move cursor Up to start of ascii, then move cursor all the way left
    printf '\e[%sA\e[999D' "${ascii_height:-0}"

    # set text padding for printing system info
    ((text_padding = ascii_len + gap))
    LC_ALL=C
}

# print system information
# ${info} is a temp variable used to hold the formatted text to be printed by printf
print_system_info() {

    # --- sky@skyarch ---
    info="${c1}--- ${user}@${hostname} ---"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"     # \e[51C moves cursor 51 columns to the right
                                                        # remove newline from expanded ${info} before print
    # OS: Arch Linux
    info="${c2}OS: ${c3}${distro}"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"

    # Kernel: 5.7.10-arch1-1
    info="${c2}Kernel: ${c3}${kernel_release}"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"
    
    # Device: Inspiron 7590
    info="${c2}Device: ${c3}${device}"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"
    
    # Uptime: 2 days, 10 hours, 3 mins
    info="${c2}Uptime: ${c3}${uptime}"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"
    
    # newline
    printf "\n"
}

print_package_info() {
    # ----- Packages -----
    info="${c1}----- Packages -----"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"
    
    # Total (T=E+D=F+N):  903     (pacman -Qq)
    info="${c2}Total (T=E+D=F+N):\t${c3}${pkg_total}"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"
    
    # Explicit (E):       203     (pacman -Qeq)
    info="${c2}Explicit (E):\t${c3}${pkg_explicit}"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"

    # Dependency(D):      700     (pacman -Qdq)
    info="${c2}Dependency (D):\t${c3}${pkg_depends}"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"
    
    # Native (N):         897     (pacman -Qnq)
    info="${c2}Native (N):\t\t${c3}${pkg_native}"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"
    
    # Foreign (F):        6       (pacman -Qmq)
    info="${c2}Foreign (F):\t\t${c3}${pkg_foreign}"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"
    
    # Orphan (O):         2       (pacman -Qdtq)   
    info="${c2}Orphan (O):\t\t${c3}${pkg_orphan}"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"

    # newline
    printf "\n"
    
    # Package cache size:   3.2G

    info="${c2}Cache size:\t${c3}${pkg_cache_size}"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"
    
    # Synced package list:  Thu 30-Jul-2020 (15:07 PM)
    info="${c2}Latest -Sy:\t${c3}${synchronize_time}"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"

    # Full system upgrade:  Thu 30-Jul-2020 (15:07 PM)
    info="${c2}Latest -Su:\t${c3}${upgrade_time}"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"
}

print_color_blocks() {
    # newline
    printf "\n"

    # print first row of 8 color blocks. Each block is 3 "█"
    printf "\e[%bC" "${text_padding}"
    for code in {30..37}
    do
        printf "\e[%bm███" "${code}"
    done

    # newline
    printf "\n"

    # print second row of 8 color blocks. Each block is 3 "█"
    printf "\e[%bC" "${text_padding}"
    for code in {90..97}
    do
        printf "\e[%bm███" "${code}"
    done

    # newline
    printf "\n"
}

# get user's name
# ${user}
get_user() {
    user=${USER:-$(id -un || printf %s "${HOME/*\/}")}
}

# get hostname
# ${hostname}
get_hostname() {
    if type -p hostname >/dev/null; then
        hostname=$(hostname)
    else
        hostname=${HOSTNAME}
    fi
}

# get distro name
# ${distro}
get_distro() {
    if type -p lsb_release >/dev/null; then
        distro=$(lsb_release -si)
    elif [[ -f /etc/lsb-release || 
            -f /usr/lib/os-release ||
            -f /etc/os-release ]]; then
        for file in /etc/lsb-release \
                    /usr/lib/os-release \
                    /etc/os-release;
        do
            source "$file" &>/dev/null && break
        done
        distro=${PRETTY_NAME:-NAME}
    else
        distro="Arch Linux"
    fi

    ascii_design=distro
}

# kernel version, e.g. "5.7.10-arch1-1"
# ${kernel_release}
get_kernel_release() {
    kernel_release=$(uname -r)
}

# get device, e.g. "Inspiron 7590"
# ${device}
get_device() {
    if [[   -f /sys/devices/virtual/dmi/id/product_name ||
            -f /sys/devices/virtual/dmi/id/product_version ]]; then
        device=$(< /sys/devices/virtual/dmi/id/product_name)
        device+=" $(< /sys/devices/virtual/dmi/id/product_version)"
    else
        device="Unknown"
    fi
}

# get uptime in format "2 days, 10 hours, 3 mins"
# days and hours not shown if equal 0
# ${uptime}
get_uptime() {
    if [[ -r /proc/uptime ]]; then
        uptime_total=$(< /proc/uptime)
        uptime_total=${uptime_total/.*}
    else
        boot=$(date -d"$(uptime -s)" "+%s")
        now=$(date "+%s")
        uptime_total=$((now - boot))
    fi

    uptime_days="$((uptime_total / 60 / 60 / 24))"
    uptime_hours="$((uptime_total / 60 / 60 % 24))"
    uptime_mins="$((uptime_total / 60 % 60))"

    uptime=""
    (( uptime_days > 0 )) && uptime+="${uptime_days} days, "
    (( uptime_hours > 0 )) && uptime+="${uptime_hours} hours, "
    uptime+="${uptime_mins} mins"
}

# get number of packages: total, explicit, dependencies, native, foreign
# ${pkg_total}
# ${pkg_explicit}
# ${pkg_depends}
# ${pkg_native}
# ${pkg_foreign}
get_package_info() {
    pkg_total=$(pacman -Qq | wc -l)
    pkg_explicit=$(pacman -Qeq | wc -l)
    pkg_depends=$(pacman -Qdq | wc -l)
    pkg_native=$(pacman -Qnq | wc -l)
    pkg_foreign=$(pacman -Qmq | wc -l)
    pkg_orphan=$(pacman -Qdtq | wc -l)

    get_cache_size
    get_synchronize_time
    get_upgrade_time
}

# get disk usage of package cache directory
# remove everything from first space to end of parameter
# ${pkg_cache_size}
get_cache_size() {
    pkg_cache_size=$(du /var/cache/pacman/pkg/ -sh)
    pkg_cache_size=${pkg_cache_size/[[:space:]]*/}
}

# get time of most recent full system upgrade
# first, grep log entry from pacman log
# next, extract substring of time value
# next, convert to desired time format
# ${upgrade_time}
get_upgrade_time() {
    tmp=$(tac /var/log/pacman.log | grep -i -m1 "starting full system upgrade")
    tmp=${tmp:1:24}
    # upgrade_time=$(date -d "${tmp}" "+%a %d-%b-%Y (%R HRS)")
    upgrade_time=$(date -d "${tmp}" "+%a %d-%b-%Y")
}

# get time of most recent synchronization of package lists
# first, grep log entry from pacman log
# next, extract substring of time value
# next, convert to desired time format
# ${synchronize_time}
get_synchronize_time() {
    tmp=$(tac /var/log/pacman.log | grep -i -m1 "synchronizing package lists")
    tmp=${tmp:1:24}
    # synchronize_time=$(date -d "${tmp}" "+%a %d-%b-%Y (%R HRS)")
    synchronize_time=$(date -d "${tmp}" "+%a %d-%b-%Y")
}

# reset text formatting
reset_format() {
    printf '\e[0m'
}

main "$@"           # pass the arguments passed to fetchpac to function main()

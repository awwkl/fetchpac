#!/usr/bin/env bash

# Fetchpac: A CLI tool written in Bash for printing system package information.
### This utility is useful for system maintenance and tracking of system installed packages. It displays the total number of packages (explicit, dependency, native, foreign, orphan); package cache size; and time of most recent full system upgrade and most recent synchronized package list.
### More information and command-line options will continue to be added. This includes appearance customization, verbosity, and printing explanations.

# Force the C locale for faster execution of script
LC_ALL=C
LANG=C

# Text Format Variables
reset='\e[0m'
bold='\e[1m'
underlined='\e[4m'

color_default='\e[39m'

color_black='\e[30m'
color_red='\e[31m'
color_green='\e[32m'
color_yellow='\e[33m'
color_blue='\e[34m'
color_magenta='\e[35m'
color_cyan='\e[36m'
color_light_gray='\e[37m'

color_dark_gray='\e[90m'
color_light_red='\e[91m'
color_light_green='\e[92m'
color_light_yellow='\e[93m'
color_light_blue='\e[94m'
color_light_magenta='\e[95m'
color_light_cyan='\e[96m'
color_white='\e[97m'

# Variables for text formatting, with an initialized value
gap=1                                       # gap between ascii image and system/package information
c1=${bold}$color_yellow                     # c1 - ascii color of pacman body
c2=${bold}$color_light_blue                 # c2 - ascii color of pacman eye
c3=${bold}$color_cyan                       # c3 - ascii color of Arch Linux logo

color_header=${bold}$color_cyan             # color_header - color of information headers
color_title=${bold}$color_green             # color_title - color of information titles
color_text=${reset}                         # color_text - color of information text

# Variables storing information to be printed by print_info(), with examples
# Provided here for an overall summary
### user                    (sky)
### hostname                (skyarch)
### distro                  (Arch Linux)
### kernel_release          (5.7.10-arch1-1)
### model                   (Inspiron 7590)
### uptime                  (2 days, 10 hours, 3 mins)
### uptime_days             (2)
### uptime_hours            (10)
### uptime_mins             (3)

### pkg_total               (903)
### pkg_explicit            (203)
### pkg_depends             (700)
### pkg_native              (897)
### pkg_foreign             (6)
### pkg_orphan              (2)

### pkg_cache_size          (3.4G)
### upgrade_time            (Thu 30-Jul-2020 (14:49 PM))
### synchronize_time        (Thu 30-Jul-2020 (14:49 PM))

# this function, main, is called at the end of this file
main() {
    get_ascii               # read ascii image into a variable
    print_ascii             # print ascii image to terminal

    print_info              # print information about system and system packages

    print_color_blocks      # print color blocks, for aesthetics and to display color options

    printf "\n"             # print newlines for vertical padding
    printf "\n"
}

# reset text formatting
reset_format() {
    printf '\e[0m'
}

# read ascii image into a variable
# ascii_height is vertical height of ascii image
# ascii_len is horizontal length of ascii image
get_ascii() {
    ascii_height=21
    ascii_len=50
    
    read -rd '' ascii_image <<'EOF'
${c1}          `poooooooooooooooooooo
       `meeeeeeeeeeeeeeeeeeeeeeeeee
     `meeeeeeeeeeeeeeeeeeeeeeeeeeeeee
   `meeeeeeeeeee${c2}#%#${c1}eeeeeeeeeeeeeeeeeee
  `meeeeeeeeee${c2}#%   %#${c1}eeeeeeeeeeeeeeeeee
`meeeeeeeeeeeeee${c2}#%#${c1}eeeeeeeeeeeeeeeeee   
<eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee     
oeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee       ${c3} `/\` ${c1}
<eeeeeeeeeeeeeeeeeeeeeeeeeeeee        ${c3} ./%%\. ${c1}
oeeeeeeeeeeeeeeeeeeeeeeeeeee         ${c3} `/%%%%\` ${c1}
<eeeeeeeeeeeeeeeeeeeeeeeee         ${c3}  ./%%%%%%\. ${c1}
oeeeeeeeeeeeeeeeeeeeeeeeeeee      ${c3}  ./%%_mm_%%\. ${c1}
<eeeeeeeeeeeeeeeeeeeeeeeeeeeee   ${c3}  */_-`    `-_\* ${c1}
oeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
<eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
`<eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
  `<eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
   `<eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
      `<eeeeeeeeeeeeeeeeeeeeeeeeee
          `<eeeeeeeeeeeeeeeeee
                `<~~~~~~
EOF
}

# print ascii image out to terminal
print_ascii() {
    # LC_ALL=${LANG:-C}

    ascii_image="${ascii_image//\$\{c1\}/$c1}"        # replace "${c1}" in image with '\e[33m',
    ascii_image="${ascii_image//\$\{c2\}/$c2}"        # required as printf below does not have interpolation
    ascii_image="${ascii_image//\$\{c3\}/$c3}"
    ascii_image="${ascii_image//\$\{c4\}/$c4}"
    ascii_image="${ascii_image//\$\{c5\}/$c5}"
    ascii_image="${ascii_image//\$\{c6\}/$c6}"

    # print ascii image to terminal, then reset text formatting 
    printf '%b\n' "$ascii_image${reset}"

    # move cursor Up to start of ascii, then move cursor all the way left
    printf '\e[%sA\e[999D' "${ascii_height:-0}"

    # set text padding for printing system info
    ((text_padding = ascii_len + gap))
    LC_ALL=C
}

# print system and package information
# ${info} is a temp variable used to hold the formatted text to be printed by printf
print_info() {
    # --- sky@skyarch ---
    get_user
    get_hostname
    info="${color_header}--- ${user}@${hostname} ---"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"     # \e[51C moves cursor 51 columns to the right
                                                        # remove newline from expanded ${info} before print
    # OS: Arch Linux
    get_distro
    info="${color_title}OS: ${color_text}${distro}"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"

    # Kernel: 5.7.10-arch1-1
    get_kernel_release
    info="${color_title}Kernel: ${color_text}${kernel_release}"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"
    
    # Device: Inspiron 7590
    get_model
    info="${color_title}Device: ${color_text}${model}"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"
    
    # Uptime: 2 days, 10 hours, 3 mins
    get_uptime
    info="${color_title}Uptime: ${color_text}${uptime}"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"
    
    # newline
    printf "\n"

    # ----- Packages -----
    info="${color_header}----- Packages -----"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"
    
    # set pkg_total, pkg_explicit, pkg_depends, etc
    get_packages

    # Total (T=E+D=F+N):  903     (pacman -Qq)
    info="${color_title}Total (T=E+D=F+N):\t${color_text}${pkg_total}"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"
    
    # Explicit (E):       203     (pacman -Qeq)
    info="${color_title}Explicit (E):\t${color_text}${pkg_explicit}"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"

    # Dependency(D):      700     (pacman -Qdq)
    info="${color_title}Dependency (D):\t${color_text}${pkg_depends}"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"
    
    # Native (N):         897     (pacman -Qnq)
    info="${color_title}Native (N):\t\t${color_text}${pkg_native}"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"
    
    # Foreign (F):        6       (pacman -Qmq)
    info="${color_title}Foreign (F):\t\t${color_text}${pkg_foreign}"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"
    
    # Orphan (O):         2       (pacman -Qdtq)   
    info="${color_title}Orphan (O):\t\t${color_text}${pkg_orphan}"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"

    # newline
    printf "\n"
    
    # Package cache size:   3.2G
    get_cache_size
    info="${color_title}Cache size:\t${color_text}${pkg_cache_size}"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"
    
    # Synced package list:  Thu 30-Jul-2020 (15:07 PM)
    get_synchronize_time
    info="${color_title}Latest -Sy:\t${color_text}${synchronize_time}"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"

    # Full system upgrade:  Thu 30-Jul-2020 (15:07 PM)
    get_upgrade_time
    info="${color_title}Latest -Su:\t${color_text}${upgrade_time}"
    printf '%b\n' "\e[${text_padding}C${info//\\n}"
    
    
}

print_color_blocks() {
    # newline
    printf "\n"

    # print first row of 8 color blocks. Each block is 3 "█"
    printf "\e[%bC" "${text_padding}"
    for code in {30..37}
    do
        printf "\e[%bm███" "${code}"
    done

    # newline
    printf "\n"

    # print second row of 8 color blocks. Each block is 3 "█"
    printf "\e[%bC" "${text_padding}"
    for code in {90..97}
    do
        printf "\e[%bm███" "${code}"
    done

    # newline
    printf "\n"
}

# get user's name
# ${user}
get_user() {
    user=${USER:-$(id -un || printf %s "${HOME/*\/}")}
}

# get hostname
# ${hostname}
get_hostname() {
    if type -p hostname >/dev/null; then
        hostname=$(hostname)
    else
        hostname=${HOSTNAME}
    fi
}

# get distro name
# ${distro}
get_distro() {
    if type -p lsb_release >/dev/null; then
        distro=$(lsb_release -si)
    elif [[ -f /etc/lsb-release || 
            -f /usr/lib/os-release ||
            -f /etc/os-release ]]; then
        for file in /etc/lsb-release \
                    /usr/lib/os-release \
                    /etc/os-release;
        do
            source "$file" &>/dev/null && break
        done
        distro=${PRETTY_NAME:-NAME}
    else
        distro="Arch Linux"
    fi
}

# kernel version, e.g. "5.7.10-arch1-1"
# ${kernel_release}
get_kernel_release() {
    kernel_release=$(uname -r)
}

# get device model, e.g. "Inspiron 7590"
# ${model}
get_model() {
    if [[   -f /sys/devices/virtual/dmi/id/product_name ||
            -f /sys/devices/virtual/dmi/id/product_version ]]; then
        model=$(< /sys/devices/virtual/dmi/id/product_name)
        model+=" $(< /sys/devices/virtual/dmi/id/product_version)"
    else
        model="Unknown"
    fi
}

# get uptime in format "2 days, 10 hours, 3 mins"
# days and hours not shown if equal 0
# ${uptime}
get_uptime() {
    if [[ -r /proc/uptime ]]; then
        uptime_total=$(< /proc/uptime)
        uptime_total=${uptime_total/.*}
    else
        boot=$(date -d"$(uptime -s)" "+%s")
        now=$(date "+%s")
        uptime_total=$((now - boot))
    fi

    uptime_days="$((uptime_total / 60 / 60 / 24))"
    uptime_hours="$((uptime_total / 60 / 60 % 24))"
    uptime_mins="$((uptime_total / 60 % 60))"

    uptime=""
    (( uptime_days > 0 )) && uptime+="${uptime_days} days, "
    (( uptime_hours > 0 )) && uptime+="${uptime_hours} hours, "
    uptime+="${uptime_mins} mins"
}

# get number of packages: total, explicit, dependencies, native, foreign
# ${pkg_total}
# ${pkg_explicit}
# ${pkg_depends}
# ${pkg_native}
# ${pkg_foreign}
get_packages() {
    pkg_total=$(pacman -Qq | wc -l)
    pkg_explicit=$(pacman -Qeq | wc -l)
    pkg_depends=$(pacman -Qdq | wc -l)
    pkg_native=$(pacman -Qnq | wc -l)
    pkg_foreign=$(pacman -Qmq | wc -l)
    pkg_orphan=$(pacman -Qdtq | wc -l)
}

# get disk usage of package cache directory
# remove everything from first space to end of parameter
# ${pkg_cache_size}
get_cache_size() {
    pkg_cache_size=$(du /var/cache/pacman/pkg/ -sh)
    pkg_cache_size=${pkg_cache_size/[[:space:]]*/}
}

# get time of most recent full system upgrade
# first, grep log entry from pacman log
# next, extract substring of time value
# next, convert to desired time format
# ${upgrade_time}
get_upgrade_time() {
    tmp=$(tac /var/log/pacman.log | grep -i -m1 "starting full system upgrade")
    tmp=${tmp:1:24}
    # upgrade_time=$(date -d "${tmp}" "+%a %d-%b-%Y (%R HRS)")
    upgrade_time=$(date -d "${tmp}" "+%a %d-%b-%Y")
}

# get time of most recent synchronization of package lists
# first, grep log entry from pacman log
# next, extract substring of time value
# next, convert to desired time format
# ${synchronize_time}
get_synchronize_time() {
    tmp=$(tac /var/log/pacman.log | grep -i -m1 "synchronizing package lists")
    tmp=${tmp:1:24}
    # synchronize_time=$(date -d "${tmp}" "+%a %d-%b-%Y (%R HRS)")
    synchronize_time=$(date -d "${tmp}" "+%a %d-%b-%Y")
}

main